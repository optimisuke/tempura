package jobcommand

import (
	"context"

	acalldi "github.com/acall-inc/acall-di"
	definition "{{.DefinitionRepository}}"
)

type (
	server struct {
	}
)

// NewServer はコンストラクタです
func NewServer() definition.{{.DefinitionServiceserver}} {
	return &server{}
}

func (t *server) {{.DefinitionRPC}}(context context.Context, req *definition.{{.DefinitionRPC}}Request) (*definition.{{.DefinitionRPC}}Response, error) {
	container := context.Value(shared.ContainerContextKey).(acalldi.Container)
	res := definition.{{.DefinitionRPC}}Response{}

	if err := container.Invoke(func(usecase Usecase) error {
		ures, err := usecase.{{.UsecaseFunction}}(&{{.UsecaseFunction}}Request{
            // TODO
		})
        if err != nil {
			return err
		}
        // TODO: res.hoge = ures.hoge
        return nil
	}); err != nil {
		return nil, err
	}
	return &res, nil
}
